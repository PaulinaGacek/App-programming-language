// sprawdzanie czy mozna sie odwolac do funkcji przed deklaracją
funkcja1();DEFINE FUNCTION funkcja1() AS DEFINE TIME t AS 30; ENDFUNCTION;

// odwołanie do nieistniejącej funkcji
funkcja2();

// test zczytywania argumentow
DEFINE TIME zmienna AS 20; funkcja2(zmienna); DEFINE FUNCTION funkcja2( TIME t) AS DEFINE TIME t AS 30; ENDFUNCTION;

// test zczytywania argumentow
DEFINE TIME zmienna AS 20; funkcja2(zmienna); DEFINE FUNCTION funkcja2( TIME t) AS SET t AS t + 30; ENDFUNCTION;

// nie przyjmowanie jako argument funkcji niezadeklarowanej zmiennej
DEFINE TIME zmienna AS 20; funkcja2(zmienna2); DEFINE FUNCTION funkcja2( TIME t) AS SET t AS t + 30; ENDFUNCTION;

// nie przyjmowanie jako argument funkcji zmiennej złego typu
DEFINE FORCE sila AS [0,1]; funkcja2(sila); DEFINE FUNCTION funkcja2(TIME t) AS SET t AS t + 30; ENDFUNCTION;

// poprawność argumentów przekazywanych do funkcji - funkcja z apply force
DEFINE TIME t AS 200; DEFINE INT i AS 30; DEFINE FORCE f AS [120,3]; DEFINE OBJECT o AS (200,200); DEFINE FUNCTION applyforce(FORCE f, TIME t, OBJECT o) AS APPLY f TO o FOR t; ENDFUNCTION; applyforce(f, t, o);
applyforce(f, t, i);

// funkcja zwracajaca argument - works, bo zmienne globalne
DEFINE TIME t AS 30; DEFINE INT zmienna AS funkcja2(t); DEFINE FUNCTION funkcja2(TIME t)-> INT AS SET t AS t + 30; RETURN t; ENDFUNCTION;

// funkcja zwracajaca argument - zmienne lokalne - works
DEFINE TIME t AS 30; DEFINE INT zmienna AS funkcja2(t); DEFINE FUNCTION funkcja2(TIME tim)-> INT AS SET tim AS tim + 30; RETURN tim; ENDFUNCTION;

// funkcja w funkcji
DEFINE TIME t AS 30; DEFINE INT zmienna AS funkcja2(t); DEFINE FUNCTION funkcja1()->INT AS DEFINE TIME w AS 20; RETURN 2137; ENDFUNCTION; DEFINE FUNCTION funkcja2(TIME tim)-> INT AS SET tim AS tim + 30; RETURN funkcja1(); ENDFUNCTION;